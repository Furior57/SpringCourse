package aop.lessons;

public class Lesson_12_AOPMeeting {
    // Мы уже знакомы с несколькими парадигмами программирования: процедурное, ООП, функциональное.
    // Настало время поговорить еще об одной парадигме, аспектно ориентированном программировании(AOP).
    //  Цель нашего обучения - устроиться на работу в крупную компанию, чтобы заниматься промышленной
    // разработкой ПО. Представим себе такую ситуацию: мы работаем в крупной компании, где уже давно
    // разрабатывается какое-то приложение, к нам приходит начальник и говорит "Мне необходимо, чтобы
    // ты настроил логирование и проверку прав доступа на всех методах связанных с выдачей книг".
    // Со рвением молодого специалиста, мы начинаем изучать методы которые этим занимаются, а там:
    // выдача книг, учет книг, хранение книг, приемка книг, закупка книг, куча служебных методов и т.д.
    // В каждый метод нам необходимо встроить новый код, который будет заниматься поставленными задачами.
    //  Первая, и самая большая, проблема заключается в том, что в КАЖДЫЙ метод необходимо внедрить код.
    // А если методов тысяча? Сколько времени это займет? А где гарантия, что мы не ошибемся где-то
    // в процессе и не забудем закрыть выражение?
    //  Вторая проблема заключается в том, что в каждом методе уже есть какая-то своя бизнес-логика,
    // внедряя новый код мы усложняем ее чтение, а может быть и такое, что в методе всего две строчки кода,
    // а мы со своим логированием добавляем еще 10. Нерациональное использование ресурсов.
    //  Именно здесь нам на помощь приходит AOP.

    //  Мы знакомы с понятием бизнес-логики, это та логика, которая производит для нас необходимые
    // действия, являя в конце своего выполнения какой-либо ожидаемый результат. Есть и другое понятие:
    // сквозная(служебная) логика, это такая логика которая выполняется во множестве мест в программе
    // автоматически. Вот вынося такую логику в какую-то отдельную сущность, мы можем назвать
    // эту сущность аспектом.
    //  В Spring это заключается в некоем AOP-proxy, это прокладка между обычными методами и
    // служебными, которая знает к каким методам, какую служебную логику применить. Причем
    // его работа скрыта, как от main-класса, так и от бизнес-класса(пусть будет так, хотя не совсем
    // правильное название).

    // Какими преимуществами обладает AOP:
    // Сквозная логика сосредоточена в одном или нескольких обособленных классах, что облегчает
    // рефакторинг кода.
    // Простота добавления новых сквозных работ, для основного кода, или имеющиеся сквозные работы
    // для новых классов. Достигается возможностью конфигурировать аспекты.
    // Бизнес-код приложения избавляется от служебного кода, легче читать, легче делать рефакторинг.

    // Однако у такого подхода есть и минус:
    // Дополнительное время на обработку аспектов, всегда необходимо понимать для чего необходим тот
    // или иной аспект и не лучше ли отказаться от него вообще. Плодить лишние сущности на
    // высоконагруженных системах не стоит.

    // AOP фреймворк состоит из двух частей:
    // Spring AOP - часть Spring, предоставляет самый распространенный функционал AOP, отличается
    // простотой использования
    // AspectJ - расширение для языка Java, де-факто стандарт аспектно ориентированного программирования,
    // предоставляет полный функционал.

}
