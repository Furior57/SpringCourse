package aop.service.aspects;

import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;

// Помечаем этот класс двумя аннотациями, сначала как @Component, а уже потом как @Aspect,
// по умолчанию этой библиотеки нет, переходим на сайт maven ищем в репозитории AspectJ weaver, качаем
// jar файл и добавляем в библиотеки проекта, почему-то автоматически maven не захотела его загружать.

// Теперь у нас есть служебный класс-аспект, в нем мы опишем метод, который будет запускаться перед
// методом Library.getBook().
@Component
@Aspect
public class LoggingAspect {
    // Почему в конце названия метода мы поставили слово Advice? Это принятое именование методов
    // внутри аспект-классов. Есть несколько типов Advice методов:
    // @Before - выполняется до метода с основной логикой
    // @AfterReturning - выполняется после нормального окончания метода с основной логикой
    // @AfterThrowing - этот метод запускается только в том случае, если основной метод бросил
    // исключение
    // After/After finally - выполняется в любом случае после завершения работы основного метода,
    // пока такой аннотации не нашел, далее изучим как это пишется
    // @Around - выполняется до и после метода с основной логикой.

    // Этот метод мы определяем как метод выполняющий свою работу до основного метода, для этого
    // пометим его аннотацией @Before, далее новый для нас синтаксис, дословно он означает:
    // перед-выполнением-public void getBook(), такое выражение называется pointcut и оно
    // описывает, когда именно будет отрабатывать аспект-метод.
    @Before("execution(public void getBook())")
    public void beforeGetBookAdvice() {
        System.out.println("beforeGetBookAdvice: trying to take a book");
    }
    // Пир работе аспект-методов очень важно учитывать скорость их работы, не перегружать
    // лишней логикой и использованием ресурсов, так как это может сильно отражаться на скорости
    // работы программы.
}
