package Part_Three_Hibernate;

public class Lesson_22_ConnectJavaToDB {
    // Устанавливаем Hibernate, для этого правой кнопкой кликаем по папке с проектом, там находим
    // пункт Add Framework, находим Hibernate и загружаем. После этого скачиваем ConnectorJ,
    // мы качаем версию не привязанную к операционной системе, распаковываем папку и добавляем
    // в наш проект через настройки Project Structure.

    // При установке Hibernate создался файл hibernate.cfg.xml, в нем прописываются настройки
    // базы, пользователя, пароля, используемого драйвера и какая именно версия SQL стоит(MySQL)
    // Мы их скопировали с лекции, там ничего особенно сложного и интересного нет.
    // Но давайте все равно перейдем в него и по пунктам разберем, что мы там написали.

    // Итак, мы имеем полностью настроенную базу банных, таблицу в ней и Hibernate, с чего же мы начнем?

    // Начнем с теории. Как мы помним Hibernate создан для того, чтобы записывать обьекты классов в
    // реляционную базу данных. Для того чтобы у нас это получилось необходимо сконфигурировать
    // связь между классом и таблицей. Сделать это можно двумя способами:
    // С помощью XML файла(устаревший), занимает больше времени
    // С помощью аннотаций(современный), им мы и будем пользоваться

    // Hibernate использует концепцию Entity class.
    // Entity class - это Java класс, который отображает информацию определенной таблицы
    // в базе данных.
    // Еще его называют POJO классом(Plain Old Java Object), такой класс должен удовлетворять
    // ряду условий. Все методы и поля должны быть private, класс и поля не могут быть final,
    // для каждого поля обязательно должны быть определены геттеры и сеттеры,
    // класс должен содержать пустой конструктор без аргументов(но может при этом иметь и несколько
    // других конструкторов) и т.д.

    // Наконец то перейдем к практике. Мы создали пакет service.entity и в нем класс Employee, перейдем
    // в этот класс.
}
