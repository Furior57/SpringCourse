package Part_one_Spring_introduction.lessons;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Lesson_6_BeanLiveCycle {
    // В этой лекции мы рассмотрим жизненный цикл бина. Сначала мы его полностью опишем:
    // Запуск приложения
    // Начало работы Spring container
    // Создание бина
    // DI - внедрение зависимостей
    // init-method - это какой-то код который будет выполняться при создании бина, его
    // может и не быть
    // Бин готов для использования
    // Использование бина
    // Конец работы Spring container(context.close())
    // destroy-method - это какой-то код который будет выполняться после закрытия контейнера, но до
    // остановки приложения, его так же может и не быть
    // Остановка приложения
    // init-method, чаще всего используется для открытия, или настройки каких либо ресурсов, баз данных,
    // стримов и т.д. destroy-method, чаще всего, используется для их закрытия.

    // Теперь посмотрим как этими методами пользоваться в Spring. В классе Cat мы определили два метода.
    // Назвали мы их init() и destroy(), а в конфигураторе добавили два параметра в бин myPet, это
    //init-method="init" и destroy-method="destroy", полностью бин можно посмотреть в applicationContext2
    // а здесь просто запустим пустой main() метод с созданным контейнером и посмотрим на
    // сообщения которые выведутся в ходе инициализации контейнера и после его закрытия.

    public static void main(String[] args) {
        System.out.println("Creating context");
        ClassPathXmlApplicationContext context = new
                ClassPathXmlApplicationContext("applicationContext2.xml");
        System.out.println("Closing context");
        context.close();

        // Вывод получился такой:
        // Creating context
//         Cat bean is created
//         Class Cat: init method
//         Constructor Person class with Pet argument
        // Closing context
//         Class Cat: destroy method
        // То есть мы видим что сначала создался контейнер, после него создался бин
        // отработал init метод, создался второй по очереди бин(его можно было убрать, но на него
        // у нас завязаны другие уроки), закрылся контейнер, отработал destroy метод.
        // У этих методов модификатор доступа может быть любым. Возвращаемый тип тоже может
        // быть любым, но так как мы никак не можем его использовать, чаще всего возвращается void.
        // Называться они могут как угодно, но лучше использовать все же эти названия, для простого
        // чтения кода. В данных методах не должно быть параметров, они вызываются автоматически
        // и Spring не знает что туда подставлять. Наш пример основан на singletone scope, поэтому
        // отработают эти методы один раз, если мы поменяем scope на prototype, то поведение кода
        // изменится, а именно:
        // init метод будет вызываться для каждого экземпляра бина
        // destroy метод для таких бинов вызываться не будет, необходимо вручную освобождать ресурсы,
        // либо реализовывать какую то логику после закрытия контейнера.
    }

}
