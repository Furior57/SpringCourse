package Part_two_AOP.lessons;

import Part_two_AOP.config.MyAOPConfig;
import Part_two_AOP.service.Library;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Lesson_16_AspectsOrderOfExecution {
    // В прошлой лекции мы столкнулись с тем, что мы не имеем никакой гарантии в какой последовательности
    // будут запускаться методы если мы их выполняем в одном аспекте. Разработчики Spring
    // рекомендуют в этом случае поступить так:
    // Мы определяем несколько разных аспектов(три в нашем случае, аспекты для логирования, проверки
    // прав доступа и новый для обработки исключений), после этого определяемся с pointcut-ами,
    // допустим мы хотим этими тремя аспектами обрабатывать методы get,
    // само pointcut-выражение мы вынесли в отдельный класс. Ссылку на него передали во все три
    // аспекта, а перед ними поставили аннотацию @Order() с числом внутри. Чем меньше число, тем выше
    // приоритет для выполнения аспекта. Вот и все. Проверим как все работает:
//    Logging aspect
//    Security aspect
//    Exception handling aspect
//    We take a book
    // Мы видим что вывод идет в том порядке в котором мы расставили аспекты, кстати в дальнейшем
    // лучше этого порядка и придерживаться, но об этом мы поговорим позже.
    // Еще пара моментов, при указании порядка выполнения аспектов обычно используются числа
    // кратные 10, 100 и т.д. Делается это для того, чтобы в случае создания нового аспекта
    // который будет работать между существующими, нам не приходилось переназначать им всем очередь.
    // Второй момент, мы можем указать равный приоритет у двух разных аспектов, используя
    // одно число в @Order, но при этом мы никогда не будем уверены какой из аспектов
    // отработает раньше другого.

    public static void main(String[] args) {
        AnnotationConfigApplicationContext context =
                new AnnotationConfigApplicationContext(MyAOPConfig.class);
        Library library = context.getBean("libraryBean", Library.class);
        library.getBook();

        context.close();
    }
}
