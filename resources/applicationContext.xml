<?xml version="1.0" encoding="UTF-8"?>
<!-- Комментарии в xml записываются таким форматом и обязательно
 уже после указания версии xml и кодировки, это декларативная строка, она обязательна в любом xml-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    <!--Весь текст выше не несет особой смысловой нагрузки для нас, но мы все же разберем
     как оно тут все устроено. Самая первая строка обязательна в любом xml документе, мы уже написали
     для чего она. Далее начинается сам документ, он иерархичен, то есть начинаем мы с "родительского"
     каталога, а далее через TAB можем создавать вложенные каталоги, в них свои вложенные каталоги и т.д.
      Но есть отличие, поэтому мы называем эти объекты "элементы", инициализируется элемент так:
     <name>Information</name>, где между первыми <> мы указываем название элемента, а </name> означает,
     что мы закрыли элемент, все что находится между этими обозначениями является значением элемента.
     Элементы могут содержать атрибуты и при этом если элемент не имеет значения, то допускается
     такая запись <name first="John" second="Smith"/>, либо можно записать так:
      <name first="John" second="Smith"></name>, открыли элемент, указали аргументы, закрыли элемент.
      Аргументы всегда указываются в двойных кавычках(английских). Именно такое написание мы видим
      в этом файле, оно стандартное. С самими аргументами здесь все гораздо проще. Это указание
      пространства имен, не более.
       Теперь перейдем к слову bean, это некая сущность которая содержит в себе метаинформацию
      о наших классах и интерфейсах, на основе бинов контейнер и создает объекты. Как мы видим,
      здесь beans является корневым элементом, в который мы уже будем класть описание наших классов-->
    <!--Теперь создадим сами бины, при этом мы указываем аргументами id и class, первое уникальный
    идентификатор, второе - полное имя класса связывающегося с id, теперь мы можем вызывать
    класс Dog по этому идентификатору. Еще момент, при указании полного имени класса мы указываем
    все пакеты ниже пакета java(точнее ниже пакета src.java, однако компилятор позволяет нам
    просто указать имя класса, а полное имя он подставит сам, вернемся в Lesson2-->
    <bean id="myPet"
          class="Part_one_Spring_introduction.animal.Cat">
    </bean>
    <!--Итак, у нас есть некий класс Person, мы не хотим писать кучу кода при создании инстанса,
    как нам поступить? Мы точно так же описываем здесь bean, но теперь добавим к нему тэг
    constructor-arg, в который передадим ссылку на id другого бина, вот и все, теперь мы можем
    с помощью контейнера создавать этот класс и в зависимости от контекста конфигуратора он
     будет сам создавать обьекты нужных классов, подставляя их в конструктор Person, вернемся в
     Lesson_3-->
    <bean id="myPerson"
          class="Part_one_Spring_introduction.animal.Person">
        <constructor-arg ref="myPet"/>
    </bean>
</beans>